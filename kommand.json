{
    "components": {
        "api": {
            "type": "ext",
            "displayname": "CK API Gateway",
            "description": "Deploys an AWS APi Gateway. API Gateway sits on the front of your API and handles accepting and processing API calls",
            "cloud": "AWS",
            "ck_plugin_tier": 1,
            "resources": ["AWS::apigateway::api", "AWS::logs::loggroup"],
            "policy": {
                "Version": "2012-10-17",
                "Statement": [{
                    "Sid": "Vis",
                    "Effect": "Allow",
                    "Action": [
                        "lambda:AddPermission",
                        "lambda:GetFunction",
                        "lambda:InvokeFunction",
                        "logs:*",
                        "apigateway:PUT",
                        "apigateway:POST",
                        "apigateway:PATCH",
                        "apigateway:DELETE",
                        "apigateway:GET"
                    ],
                    "Resource": "*"
                }]
            },
            "environment_variables": {
                "domain_name_extension_arn": "@domain_name:props.function_arn",
                "route53_extension_arn": "@route53.record:props.function_arn"
            },
            "input": {
                "type": "object",
                "properties": {
                    "resources": {
                        "type": "object",
                        "description": "Each key at the base level of this object must specify a route (e.g. /soar). Then, each value should be an object with additional route keys and/or HTTP methods as keys (e.g. POST). The route keys should have as their value either an HTTP URL, a lambda component reference, a lambda ARN, or a list with the first element being one of the three previously mentioned strings and the second element being the name of an authorizer. https://github.com/cloudkommand/apigateway for examples."
                    },
                    "cors_configuration": {
                        "type": "object",
                        "description": "If you want to specify a custom CORS configuration to attach to this API, pass this parameter",
                        "properties": {
                            "allowOrigins": {
                                "type": "array",
                                "description": "Set to \"*\" to allow all origins. Otherwise set to a list of origins"
                            },
                            "allowMethods": {
                                "type": "array",
                                "description": "Set to \"*\" to allow all methods. Otherwise set to a list of methods"
                            },
                            "allowHeaders": {
                                "type": "array",
                                "description": "Set to a list of headers for Access-control-allow-headers in CORS"
                            },
                            "exposeHeaders": {
                                "type": "array",
                                "description": "Set to a list of headers for Access-control-expose-headers in CORS"
                            },
                            "maxAge": {
                                "type": "number"
                            }
                        },
                        "required": [
                            "allowOrigins",
                            "allowMethods",
                            "allowHeaders",
                            "exposeHeaders"
                        ]
                    },
                    "authorizers": {
                        "type": "object",
                        "description": "A dictionary of the JWT and Lambda authorizers that should be attached to this API",
                        "common": true,
                        "properties": {
                            "audience": {
                                "type": "string",
                                "description": "The audience that the JWT authorizer should validate against"
                            },
                            "audiences": {
                                "type": "array",
                                "description": "A list of audiences the JWT authorizer should validate against"
                            },
                            "issuer": {
                                "type": "string",
                                "description": "The issuer of the token."
                            },
                            "connect_url": {
                                "type": "string",
                                "description": "Cognito endpoint to get issuer from. Only set for Cognito JWT issuers"
                            },
                            "source": {
                                "type": "string",
                                "description": "The header to get the JWT from. Only set if you want a header other than Authorization"
                            },
                            "lambda_arn": {
                                "type": "string",
                                "description": "The ARN for the desired authorizer Lambda"
                            },
                            "payload_version": {
                                "type": "string",
                                "enum": ["1.0", "2.0"],
                                "default": "2.0",
                                "description": "The event format passed to Lambdas by API Gateway. We recommend 2.0. See https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html for a comparison of the two and more details"
                            },
                            "enable_simple_responses": {
                                "type": "boolean",
                                "description": "Whether to allow the authorizer to return a boolean value only",
                                "default": true
                            },
                            "cache_seconds": {
                                "type": "integer",
                                "description": "How long to cache this Authorizer result",
                                "default": 300
                            }
                        },
                        "anyOf": [
                            {
                                "required": [
                                    "lambda_arn"
                                ]
                            },
                            {
                                "required": [
                                    "audience",
                                    "issuer"
                                ]
                            },
                            {
                                "required": [
                                    "audiences",
                                    "issuer"
                                ]
                            },
                            {
                                "required": [
                                    "audience",
                                    "connect_url"
                                ]
                            },
                            {
                                "required": [
                                    "audiences",
                                    "connect_url"
                                ]
                            }
                        ]
                    },
                    "stage_variables": {
                        "type": "object",
                        "description": "key-value pairs of variables that should get attached to the stage"
                    },
                    "lambda_payload_version": {
                        "type": "string",
                        "enum": ["1.0", "2.0"],
                        "default": "2.0",
                        "description": "The event format passed to Lambdas by API Gateway. We recommend 2.0. See https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html for a comparison of the two and more details"
                    },
                    "throttling_burst_limit": {
                        "type": "integer",
                        "description": "The default burst limit for all routes"
                    },
                    "throttling_rate_limit": {
                        "type": "number",
                        "description": "The default rate limit for all routes"
                    },
                    "cors_enabled": {
                        "type": "boolean",
                        "common": true,
                        "description": "If true (and cors_configuration not specified), sets the cors configuration to a set of default values intended to service APIs being hit by the browser.",
                        "default": false
                    },
                    "tags": {
                        "type": "object",
                        "common": true,
                        "description": "A set of key-value pairs to attach to this API Gateway as tags"
                    },
                    "name": {
                        "type": "string",
                        "common": true,
                        "description": "The name of the API Gateway. Will be auto-generated if not specified"
                    },
                    "stage_name": {
                        "type": "string",
                        "description": "The name of the stage, this is added to the URL of the API for all endpoints if calling directly through the default API URL and not through a custom domain name. CloudKommand recommends not setting this value and versioning APIs through routing with 'resources'",
                        "default": "live"
                    },
                    "domains": {
                        "type": "object",
                        "description": "A set of key value pairs, with the keys being a namespace, and the values being either the domain name or a dictionary with keys 'domain' and (optional) 'hosted_zone_id'. Set hosted_zone_id if you want to use a private hosted zone in Route53.",
                        "common": true,
                        "additionalProperties": {
                            "type": ["object", "string"],
                            "properties": {
                                "domain": {
                                    "type": "string",
                                    "description": "The domain name to use for this API"
                                },
                                "hosted_zone_id": {
                                    "type": "string",
                                    "description": "The ID of the Route53 hosted zone to use for this domain"
                                }
                            }
                        }
                    },
                    "domain_names": {
                        "type": "array",
                        "description": "A list of domain names to point at this API"
                    },
                    "domain_name": {
                        "type": "string",
                        "description": "The (singular) domain name to point at this API"
                    },
                    "base_domain": {
                        "type": "string",
                        "common": true,
                        "description": "Pass a base domain to get a unique domain through a generated subdomain. Set this value if you want multiple developers working on the same API to get unique domains per CloudKommand project."
                    }
                },
                "required": [
                    "resources"
                ] 
            },
            "props": {
                "log_group_arn": {
                    "type": "string",
                    "description": "The ARN of the log group associated with this API"
                },
                "log_group_name": {
                    "type": "string",
                    "description": "The name of the log group associated with this API"
                },
                "api_id": {
                    "type": "string",
                    "description": "The ID of this API. Appears in the default HTTP endpoint"
                },
                "arn": {
                    "type": "string",
                    "description": "The ARN for this API"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this API, as it appears in the console"
                },
                "api_endpoint": {
                    "type": "string",
                    "description": "The default HTTPS endpoint of this API"
                },
                "stage_name": {
                    "type": "string",
                    "description": "The name of the deployed stage"
                },
                "Route53 {key}": {
                    "type": "object",
                    "description": "Contains the properties of any route53.record components deployed, with the key being the key in the domains dictionary. If 'base_domain' is used instead, the key is set to 1"
                },
                "Domain {key}": {
                    "type": "object",
                    "description": "Contains the properties of any domain_name components deployed, with the key being the key in the domains dictionary. If 'base_domain' is used instead, the key is set to 1"
                }
            },
            "examples": [{
                "displayname": "API with Lambda Authorizer",
                "notes": "This example shows how to deploy an API Gateway with a Lambda Authorizer. CORS requires OPTIONS be routed without the authorizer, and the simple cors_enabled flag sets CORS to a standard configuration.",
                "definition": {
                    "type": "&apigw.api",
                    "resources": {
                        "/{proxy+}": {
                            "OPTIONS": "&api_lambda",
                            "ANY": ["&api_lambda:props.arn", "custom"]
                        }
                    },
                    "authorizers": {
                        "custom": {
                            "lambda_arn": "&authorizer:props.arn"
                        }
                    },
                    "cors_enabled": true
                }
            }, {
                "displayname": "Versioned API Through Routing",
                "notes": "This is an example of how CloudKommand recommends you version APIs. The v2 authorizer also caches results keying on both the path and the authorization header, rather than just the authorization header.",
                "definition": {
                    "type": "&apigw.api",
                    "resources": {
                        "/api/v1/{proxy+}": {
                            "OPTIONS": "&api_lambda",
                            "ANY": ["&api_lambda", "custom"]
                        },
                        "/api/v2/{proxy+}": {
                            "OPTIONS": "&api_lambda_v2",
                            "ANY": ["&api_lambda_v2", "v2"]
                        },
                        "/api/webhooks/facebook": {
                            "POST": "&fb_webhook_lambda"
                        },
                        "/api/webhooks/google": {
                            "POST": "&g_webhook_lambda"
                        }
                    },
                    "authorizers": {
                        "custom": {
                            "lambda_arn": "&authorizer:props.arn"
                        },
                        "v2": {
                            "lambda_arn": "&authorizer_v2:props.arn",
                            "source": " $request.header.Authorization,$context.path"
                        }
                    },
                    "cors_enabled": true
                }
            }, {
                "displayname": "API with OIDC Authorizer",
                "notes": "",
                "definition": {
                    "type": "&apigw.api",
                    "resources": {
                        "/api/v1": {
                            "/unauthenticated/{proxy+}": {
                                "GET": "&public_lambda"
                            },
                            "/{proxy+}": {
                                "OPTIONS": "&api_lambda",
                                "ANY": ["&api_lambda:props.arn", "fb"]
                            }
                        }
                    },
                    "authorizers": {
                        "fb": {
                            "audiences": ["allowed_audience_1", "allowed_audience_2"],
                            "issuer": "https://www.facebook.com"
                        }
                    },
                    "cors_enabled": true
                }
            }]
        },
        "domain_name": {
            "type": "ext",
            "displayname": "CK API Gateway Custom Domain Name",
            "description": "Deploys an AWS API Gateway Custom Domain Name. Custom Domain Names are used to route calls from Route53 to an API Gateway",
            "cloud": "AWS",
            "resources": ["AWS::apigateway::customdomainname"],
            "ck_plugin_tier": 4,
            "policy": {
                "Version": "2012-10-17",
                "Statement": [{
                    "Sid": "Vis",
                    "Effect": "Allow",
                    "Action": [
                        "apigateway:PUT",
                        "apigateway:POST",
                        "apigateway:PATCH",
                        "apigateway:DELETE",
                        "apigateway:GET",
                        "acm:ListCertificates"
                    ],
                    "Resource": "*"
                }]
            },
            "props": {
                "name": {
                    "type": "string",
                    "description": "The domain name (possibly generated)"
                },
                "certificate_arn": {
                    "type": "string",
                    "description": "The ARN of the ACM certificate that is used when hitting this domain name"
                },
                "hosted_zone_id": {
                    "type": "string",
                    "description": "The hosted zone ID of this domain name"
                },
                "api_gateway_domain_name": {
                    "type": "string",
                    "description": "An AWS-internal domain name for the API"
                }
            },
            "input": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The desired domain name",
                        "common": true
                    },
                    "base_domain": {
                        "type": "string",
                        "description": "Pass a base domain to get a unique domain name through a generated subdomain",
                        "common": true
                    },
                    "truststore_uri": {
                        "type": "string",
                        "description": "An Amazon S3 URL that specifies the truststore for mutual TLS authentication"
                    },
                    "truststore_version": {
                        "type": "string",
                        "description": "The version of the S3 object that contains your truststore. To use this parameter, the S3 Bucket must have versioning enabled."
                    },
                    "tags": {
                        "type": "object",
                        "description": "A set of key-value pairs to attach to this API Gateway custom domain name as tags",
                        "common": true
                    }
                },
                "anyOf": [{
                    "required": [
                        "name"
                    ]
                }, {
                    "required": [
                        "base_domain"
                    ]
                }]
            },
            "examples": [
                {
                    "displayname": "Custom Domain Name",
                    "notes": "Includes tags.",
                    "definition": {
                        "type": "&apigw.domain_name",
                        "name": "api.example.com",
                        "tags": {
                            "tag1": "value1",
                            "tag2": "value2"
                        }
                    }
                },
                {
                    "displayname": "Domain Name from Base Domain",
                    "definition": {
                        "type": "&apigw.domain_name",
                        "base_domain": "example.com"
                    }
                }
            ]
        }
    },
    "repos": {
        "route53": "https://github.com/cloudkommand/route53"
    }
}